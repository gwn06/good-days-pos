// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/model/employee.dart';
import 'app/data/model/product.dart';
import 'app/data/model/sales_history.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4726413033350954970),
      name: 'Employee',
      lastPropertyId: const IdUid(4, 3230930323191201245),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3594053509574668660),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2378321769693862431),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7049475272484674522),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3230930323191201245),
            name: 'username',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3734884152119856401),
      name: 'ProductInfo',
      lastPropertyId: const IdUid(10, 216822566418761300),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8607591811126885487),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6953196194479333638),
            name: 'quantitySold',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3623235811739059767),
            name: 'availableQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2511352043449277538),
            name: 'costPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7578612065083952466),
            name: 'sellingPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5024946536200255690),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1708256697018448235),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8484748310661373194),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 660646891704973475),
            name: 'expiryDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 216822566418761300),
            name: 'batchList',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8588775238342490100),
      name: 'SalesHistory',
      lastPropertyId: const IdUid(7, 944034556139121825),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8843209102120097815),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5229486830696691819),
            name: 'employeeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9040754442838603067),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4141082355179004696),
            name: 'shoppingCart',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8335507572179008551),
            name: 'discount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1953011415695177947),
            name: 'subtotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 944034556139121825),
            name: 'grandTotal',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8588775238342490100),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Employee: EntityDefinition<Employee>(
        model: _entities[0],
        toOneRelations: (Employee object) => [],
        toManyRelations: (Employee object) => {},
        getId: (Employee object) => object.id,
        setId: (Employee object, int id) {
          object.id = id;
        },
        objectToFB: (Employee object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final usernameOffset = fbb.writeString(object.username);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, usernameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Employee(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    ProductInfo: EntityDefinition<ProductInfo>(
        model: _entities[1],
        toOneRelations: (ProductInfo object) => [],
        toManyRelations: (ProductInfo object) => {},
        getId: (ProductInfo object) => object.id,
        setId: (ProductInfo object, int id) {
          object.id = id;
        },
        objectToFB: (ProductInfo object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final nameOffset = fbb.writeString(object.name);
          final batchListOffset = fbb.writeList(
              object.batchList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.quantitySold);
          fbb.addInt64(2, object.availableQuantity);
          fbb.addFloat64(3, object.costPrice);
          fbb.addFloat64(4, object.sellingPrice);
          fbb.addOffset(5, categoryOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addOffset(7, nameOffset);
          fbb.addInt64(8, object.expiryDate.millisecondsSinceEpoch);
          fbb.addOffset(9, batchListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductInfo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              quantitySold:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              availableQuantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              costPrice:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              sellingPrice:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              expiryDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              batchList: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 22, []),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        }),
    SalesHistory: EntityDefinition<SalesHistory>(
        model: _entities[2],
        toOneRelations: (SalesHistory object) => [],
        toManyRelations: (SalesHistory object) => {},
        getId: (SalesHistory object) => object.id,
        setId: (SalesHistory object, int id) {
          object.id = id;
        },
        objectToFB: (SalesHistory object, fb.Builder fbb) {
          final shoppingCartOffset = fbb.writeString(object.shoppingCart);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.employeeId);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(3, shoppingCartOffset);
          fbb.addFloat64(4, object.discount);
          fbb.addFloat64(5, object.subtotal);
          fbb.addFloat64(6, object.grandTotal);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SalesHistory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              discount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              subtotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              grandTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              employeeId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              shoppingCart: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Employee] entity fields to define ObjectBox queries.
class Employee_ {
  /// see [Employee.id]
  static final id = QueryIntegerProperty<Employee>(_entities[0].properties[0]);

  /// see [Employee.firstName]
  static final firstName =
      QueryStringProperty<Employee>(_entities[0].properties[1]);

  /// see [Employee.lastName]
  static final lastName =
      QueryStringProperty<Employee>(_entities[0].properties[2]);

  /// see [Employee.username]
  static final username =
      QueryStringProperty<Employee>(_entities[0].properties[3]);
}

/// [ProductInfo] entity fields to define ObjectBox queries.
class ProductInfo_ {
  /// see [ProductInfo.id]
  static final id =
      QueryIntegerProperty<ProductInfo>(_entities[1].properties[0]);

  /// see [ProductInfo.quantitySold]
  static final quantitySold =
      QueryIntegerProperty<ProductInfo>(_entities[1].properties[1]);

  /// see [ProductInfo.availableQuantity]
  static final availableQuantity =
      QueryIntegerProperty<ProductInfo>(_entities[1].properties[2]);

  /// see [ProductInfo.costPrice]
  static final costPrice =
      QueryDoubleProperty<ProductInfo>(_entities[1].properties[3]);

  /// see [ProductInfo.sellingPrice]
  static final sellingPrice =
      QueryDoubleProperty<ProductInfo>(_entities[1].properties[4]);

  /// see [ProductInfo.category]
  static final category =
      QueryStringProperty<ProductInfo>(_entities[1].properties[5]);

  /// see [ProductInfo.description]
  static final description =
      QueryStringProperty<ProductInfo>(_entities[1].properties[6]);

  /// see [ProductInfo.name]
  static final name =
      QueryStringProperty<ProductInfo>(_entities[1].properties[7]);

  /// see [ProductInfo.expiryDate]
  static final expiryDate =
      QueryIntegerProperty<ProductInfo>(_entities[1].properties[8]);

  /// see [ProductInfo.batchList]
  static final batchList =
      QueryStringVectorProperty<ProductInfo>(_entities[1].properties[9]);
}

/// [SalesHistory] entity fields to define ObjectBox queries.
class SalesHistory_ {
  /// see [SalesHistory.id]
  static final id =
      QueryIntegerProperty<SalesHistory>(_entities[2].properties[0]);

  /// see [SalesHistory.employeeId]
  static final employeeId =
      QueryIntegerProperty<SalesHistory>(_entities[2].properties[1]);

  /// see [SalesHistory.date]
  static final date =
      QueryIntegerProperty<SalesHistory>(_entities[2].properties[2]);

  /// see [SalesHistory.shoppingCart]
  static final shoppingCart =
      QueryStringProperty<SalesHistory>(_entities[2].properties[3]);

  /// see [SalesHistory.discount]
  static final discount =
      QueryDoubleProperty<SalesHistory>(_entities[2].properties[4]);

  /// see [SalesHistory.subtotal]
  static final subtotal =
      QueryDoubleProperty<SalesHistory>(_entities[2].properties[5]);

  /// see [SalesHistory.grandTotal]
  static final grandTotal =
      QueryDoubleProperty<SalesHistory>(_entities[2].properties[6]);
}
